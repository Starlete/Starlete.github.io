<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>StarDust&#39;Blog</title>
  
  <subtitle>一片自留地</subtitle>
  <link href="https://starlete.github.io/atom.xml" rel="self"/>
  
  <link href="https://starlete.github.io/"/>
  <updated>2022-08-23T04:04:56.382Z</updated>
  <id>https://starlete.github.io/</id>
  
  <author>
    <name>Tu Congrui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Vercel实现Github Pages百度收录</title>
    <link href="https://starlete.github.io/2022/08/23/%E4%BD%BF%E7%94%A8Vercel%E5%AE%9E%E7%8E%B0Github-Pages%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/"/>
    <id>https://starlete.github.io/2022/08/23/%E4%BD%BF%E7%94%A8Vercel%E5%AE%9E%E7%8E%B0Github-Pages%E7%99%BE%E5%BA%A6%E6%94%B6%E5%BD%95/</id>
    <published>2022-08-23T04:04:56.000Z</published>
    <updated>2022-08-23T04:04:56.382Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Oracle中的闪回查询(Flashback Query)</title>
    <link href="https://starlete.github.io/2022/08/18/Oracle%E4%B8%AD%E7%9A%84%E9%97%AA%E5%9B%9E%E6%9F%A5%E8%AF%A2-Flashback-Query/"/>
    <id>https://starlete.github.io/2022/08/18/Oracle%E4%B8%AD%E7%9A%84%E9%97%AA%E5%9B%9E%E6%9F%A5%E8%AF%A2-Flashback-Query/</id>
    <published>2022-08-18T07:53:06.000Z</published>
    <updated>2022-08-18T08:23:39.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在对数据库进行操作时，难免会出现误删数据的情况，此时如无法进行回滚(Rollback)，便难以恢复数据，但Oracle提供的闪回查询(Flashback Query)方式，可以很好的解决这个问题。</p><p> 闪回查询可以看做是一种特殊的查询方式，即使用闪回技术查询某张表以前的数据而不对该表作出修改 </p><p><strong>提醒：使用truncate清空的表格无法恢复</strong></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>本文仅介绍记录闪回的使用方式，如需要进行闪回相关设置或其他级别闪回，可参见</p><p><a href="https://blog.csdn.net/weixin_30895723/article/details/104257858">Oracle闪回技术-满格</a></p><p>闪回查询是通过AS OF关键字实现的，具体如下 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">OF</span> <span class="type">TIMESTAMP</span> expression</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure><p>expression为需查询的时间节点</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> dbname.tables</span><br><span class="line"><span class="keyword">as</span> <span class="keyword">of</span> <span class="type">timestamp</span> to_timestamp(<span class="string">&#x27;2022-08-18 14:20:00&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd hh24:mi:ss&#x27;</span>)</span><br><span class="line"><span class="keyword">WHERE</span> ID<span class="operator">=</span><span class="number">12345</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在对数据库进行操作时，难免会出现误删数据的情况，此时如无法进行回滚(Rollback)，便难以恢复数据，但Oracle提供的闪回查询(Fla</summary>
      
    
    
    
    <category term="技术" scheme="https://starlete.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Oracle" scheme="https://starlete.github.io/tags/Oracle/"/>
    
    <category term="SQL" scheme="https://starlete.github.io/tags/SQL/"/>
    
    <category term="数据恢复" scheme="https://starlete.github.io/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Oracle中的Sqlldr工具用法</title>
    <link href="https://starlete.github.io/2022/08/17/Oracle%E4%B8%AD%E7%9A%84Sqlldr%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95/"/>
    <id>https://starlete.github.io/2022/08/17/Oracle%E4%B8%AD%E7%9A%84Sqlldr%E5%B7%A5%E5%85%B7%E7%94%A8%E6%B3%95/</id>
    <published>2022-08-17T01:27:07.000Z</published>
    <updated>2022-08-17T03:13:37.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Oracle数据库中导入小批量数据时，使用PL&#x2F;SQL Developer工具或INSERT语句导入较为方便，但当数据量较大时，该方式将会消耗较多的时间及系统资源或无法导入，此时可使用 Oracle 的 Sql Loader(sqlldr)工具导入。</p><p>执行sqlldr命令后可查看到sqlldr的参数如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Valid Keywords:    </span><br><span class="line">    userid -- ORACLE username/password           </span><br><span class="line">   control -- control file name                  </span><br><span class="line">       log -- log file name                      </span><br><span class="line">       bad -- bad file name                      </span><br><span class="line">      data -- data file name                     </span><br><span class="line">   discard -- discard file name                  </span><br><span class="line">discardmax -- number of discards to allow          (Default all)</span><br><span class="line">      skip -- number of logical records to skip    (Default 0)</span><br><span class="line">      load -- number of logical records to load    (Default all)</span><br><span class="line">    errors -- number of errors to allow            (Default 50)</span><br><span class="line">      rows -- number of rows in conventional path bind array or between direct path data saves</span><br><span class="line">               (Default: Conventional path 64, Direct path all)</span><br><span class="line">  bindsize -- size of conventional path bind array in bytes  (Default 256000)</span><br><span class="line">    silent -- suppress messages during run (header,feedback,errors,discards,partitions)</span><br><span class="line">    direct -- use direct path                      (Default FALSE)</span><br><span class="line">   parfile -- parameter file: name of file that contains parameter specifications</span><br><span class="line">  parallel -- do parallel load                     (Default FALSE)</span><br><span class="line">      file -- file to allocate extents from      </span><br><span class="line">skip_unusable_indexes -- disallow/allow unusable indexes or index partitions  (Default FALSE)</span><br><span class="line">skip_index_maintenance -- do not maintain indexes, mark affected indexes as unusable  (Default FALSE)</span><br><span class="line">commit_discontinued -- commit loaded rows when load is discontinued  (Default FALSE)</span><br><span class="line">  readsize -- size of read buffer                  (Default 1048576)</span><br><span class="line">external_table -- use external table for load; NOT_USED, GENERATE_ONLY, EXECUTE  (Default NOT_USED)</span><br><span class="line">columnarrayrows -- number of rows for direct path column array  (Default 5000)</span><br><span class="line">streamsize -- size of direct path stream buffer in bytes  (Default 256000)</span><br><span class="line">multithreading -- use multithreading in direct path  </span><br><span class="line"> resumable -- enable or disable resumable for current session  (Default FALSE)</span><br><span class="line">resumable_name -- text string to help identify resumable statement</span><br><span class="line">resumable_timeout -- wait time (in seconds) for RESUMABLE  (Default 7200)</span><br><span class="line">date_cache -- size (in entries) of date conversion cache  (Default 1000)</span><br><span class="line">no_index_errors -- abort load on any index errors  (Default FALSE)</span><br></pre></td></tr></table></figure><p>其中，重点关注以下参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">userid：Oracle的username/password[@servicename]</span><br><span class="line">control：控制文件，可能包含表的数据</span><br><span class="line">log：记录导入时的日志文件，默认控制文件（去除扩展名）.log</span><br><span class="line">bad：坏数据文件，默认为控制文件（去除扩展名）.bad</span><br><span class="line">data：数据文件，一般在控制文件中指定。用参数控制文件中不指定数据谁的更适于自动操作。</span><br><span class="line">error：允许的错误记录数，可以用他来控制一条记录都不能错。</span><br><span class="line">rows：多少条记录提交一次，默认为64</span><br><span class="line">skip：跳过的行数，比如导出的数据文件前面几行是表头或其他描述。</span><br></pre></td></tr></table></figure><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>sqlldr的使用，有两种方法：</p><p>（1）只使用一个控制文件，在这个控制文件中包含数据。</p><p>（2）使用一个控制文件（作为模板）和一个数据文件。</p><h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>一般为了便于模板和数据的分离，建议采用第二种方式，这里也只记录第二种方式的用法，数据文件需以固定分隔符分隔，一般建议采用csv格式的文件，数据文件可以用 PL&#x2F;SQL Developer 导出，也可以自数据库外部导入。</p><p><strong>当需导入数据为.xlsx或.xls格式的表格时，可以使用unoconv工具在Linux中进行转换，示例如下</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unoconv -f csv *.xlsx</span><br></pre></td></tr></table></figure><h3 id="控制文件"><a href="#控制文件" class="headerlink" title="控制文件"></a>控制文件</h3><p>控制文件以.ctl为后缀，写法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS (skip=1,rows=128) -- sqlldr 命令显示的选项可以写到这里边来,skip=1 用来跳过数据中的第一行</span><br><span class="line">LOAD DATA</span><br><span class="line">INFILE &quot;*.csv&quot; --指定外部数据文件，可以写多个 INFILE &quot;*.csv&quot; 指定多个数据文件</span><br><span class="line">--这里还可以使用 BADFILE、DISCARDFILE 来指定坏数据和丢弃数据的文件，</span><br><span class="line">truncate --操作类型，用 truncate table 来清除表中原有记录</span><br><span class="line">INTO TABLE tables -- 要插入记录的表</span><br><span class="line">Fields terminated by &quot;,&quot; -- 数据中每行记录用 &quot;,&quot; 分隔</span><br><span class="line">TRAILING NULLCOLS(</span><br><span class="line">COL1 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL2 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL3 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL4 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL5 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;)</span><br></pre></td></tr></table></figure><p> 说明：在操作类型 truncate 位置可用以下中的一值：</p><ol><li>insert   –为缺省方式，在数据装载开始时要求表为空</li><li>append –在表中追加新记录</li><li>replace –删除旧记录(用 delete from table 语句)，替换成新装载的记录</li><li>truncate –删除旧记录(用 truncate table 语句)，替换成新装载的记录</li></ol><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS (skip=1,rows=1000, errors=1000, readsize=10000000)</span><br><span class="line">load data CHARACTERSET UTF8 infile &#x27;xxx.csv&#x27;</span><br><span class="line">APPEND into table Tables FIELDS TERMINATED BY &#x27;,&#x27;</span><br><span class="line"></span><br><span class="line">TRAILING NULLCOLS(</span><br><span class="line">COL1 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL2 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL3 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL4 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;,</span><br><span class="line">COL5 OPTIONALLY ENCLOSED BY &#x27;&quot;&#x27;)</span><br></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlldr dbuser/dbpass@dbservice control=*.ctl</span><br></pre></td></tr></table></figure><p> 执行完 sqlldr 后希望能留意一下生成的几个文件，如 users.log 日志文件、users.bad 坏数据文件等。特别是要看看日志文件，从中可让你更好的理解 Sql Loader，里面有对控制文件的解析、列出每个字段的类型、加载记录的统计、出错原因等信息。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在Oracle数据库中导入小批量数据时，使用PL&amp;#x2F;SQL Developer工具或INSERT语句导入较为方便，但当数据量较大时，</summary>
      
    
    
    
    <category term="技术" scheme="https://starlete.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Oracle" scheme="https://starlete.github.io/tags/Oracle/"/>
    
    <category term="SQL" scheme="https://starlete.github.io/tags/SQL/"/>
    
    <category term="数据导入" scheme="https://starlete.github.io/tags/%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>删除归档页</title>
    <link href="https://starlete.github.io/2022/08/09/%E5%88%A0%E9%99%A4%E5%BD%92%E6%A1%A3%E9%A1%B5/"/>
    <id>https://starlete.github.io/2022/08/09/%E5%88%A0%E9%99%A4%E5%BD%92%E6%A1%A3%E9%A1%B5/</id>
    <published>2022-08-09T10:17:32.000Z</published>
    <updated>2022-08-15T05:08:56.955Z</updated>
    
    <content type="html"><![CDATA[<p>22&#x2F;08&#x2F;15 更新</p><p>更换主题后恢复归档页</p><hr><p>今天删除了Hexo的归档页，替换为导航页(categories)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;22&amp;#x2F;08&amp;#x2F;15 更新&lt;/p&gt;
&lt;p&gt;更换主题后恢复归档页&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今天删除了Hexo的归档页，替换为导航页(categories)&lt;/p&gt;
</summary>
      
    
    
    
    <category term="记录" scheme="https://starlete.github.io/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo下创建Categories</title>
    <link href="https://starlete.github.io/2022/08/09/Hexo%E4%B8%8B%E5%88%9B%E5%BB%BACategories/"/>
    <id>https://starlete.github.io/2022/08/09/Hexo%E4%B8%8B%E5%88%9B%E5%BB%BACategories/</id>
    <published>2022-08-09T08:47:32.000Z</published>
    <updated>2022-08-17T03:15:34.859Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用博客时，发现主页较为杂乱，了解到Hexo本身就提供了Categories功能，进行配置，整理过程如下</p><h2 id="1-安装Hexo的categories和Tags生成插件"><a href="#1-安装Hexo的categories和Tags生成插件" class="headerlink" title="1.安装Hexo的categories和Tags生成插件"></a>1.安装Hexo的categories和Tags生成插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br></pre></td></tr></table></figure><h2 id="2-生成-categories-页面"><a href="#2-生成-categories-页面" class="headerlink" title="2.生成 categories 页面"></a>2.生成 categories 页面</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><h2 id="3-修改Hexo默认写作模板"><a href="#3-修改Hexo默认写作模板" class="headerlink" title="3.修改Hexo默认写作模板"></a>3.修改Hexo默认写作模板</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ./hexo/scaffolds/post.md</span><br></pre></td></tr></table></figure><p>在模板中增加categories标识</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:   //新加行</span><br></pre></td></tr></table></figure><h2 id="4-写作"><a href="#4-写作" class="headerlink" title="4.写作"></a>4.写作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post test</span><br></pre></td></tr></table></figure><p>写作时在categories:后添加categories</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">categories: Hexo</span><br></pre></td></tr></table></figure><h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5.发布"></a>5.发布</h2><p>完成写作后，使用如下命令，Hexo将会自动生成categories信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>测试效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天使用博客时，发现主页较为杂乱，了解到Hexo本身就提供了Categories功能，进行配置，整理过程如下&lt;/p&gt;
&lt;h2 id=&quot;1-安装Hexo的categories和Tags生成插件&quot;&gt;&lt;a href=&quot;#1-安装Hexo的categories和Tags生成插件&quot; </summary>
      
    
    
    
    <category term="技术" scheme="https://starlete.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Hexo" scheme="https://starlete.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
